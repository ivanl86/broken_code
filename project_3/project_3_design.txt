
objects:
building
position
person : infected
: lounger 20% chance to make a random move
: hyper always make a random move
: aggressor always make a move and purse the spec-op within 2 adjacent tiles
person : uninfected

Building Z has 80 rooms in 8x10 grid
spec-op starts at room (0, 0)
6 actions
(N)orth, (S)outh, (W)est, (E)ast, (P)ause, (C)arry

The antidote is located in one of the four center rooms: (4, 3), (4, 4), (5, 3), (5, 4)

O = spec-op
S = scientist
L = lounger
H = hyper
A = aggressor

Class:
Building
contains all person objects
6 lounger, 4 hyper, 2 aggressor
1 spec-op, 1 scientist
friend ostrean<< to output the layout of the building with the position of all the person objects

Position (struct)
public data members: x and y
a constructor to initial values of x and y
and a copy of constructor that takes a position as an argument

Person
base class for all the infected, the spec-op, the scientist
Protected: position data member
type of person
a constructor that takes a position and type as its only argument
operator== and operator!= are overridden to compare the position of two person objects
pure virtual function called move which takes the move as its argument

Infected
pure virtual function called move which has a move as its parameter

Lounger, Hyper, Aggressor
override the move function in infected
a constructor takes a position as its parameter
the constructor for the Aggressor takes a second parameter which is the pointer to the spec-op object
It allows the aggressor to purse the spec-op

Uninfected
it represents the scientist and the spec-op
it overrides the pure virtual move funciton in Person class
it should throw a runtime exception if the move is invalid

write a program called building_z.cpp to handle all uesr input and output and turn taking
and the player's move making
std::cout << buildingZ << std::endl;

the spec-op saves the scientist if both of their positions are at (0, 0)

do not change the user interface or the behavior
add pre and post condition comments to function prototype in each header file
can add private members to the header files of any class
but dot not change the public or protected sections unless granted permission

Questions
//Aggressor() delete Innocent?
~Aggressor(){}; in aggressor.h
std::vector<Infected*> guards; in building.h
add default constructor
why use the default 'A' in move()
does invalid move count as a turn?